# Enable smem
smem --set learning on

# Smem db settings
# smem --set driver org.sqlite.JDBC //can be ommited. throws error once enabled
# smem --set protocol jdbc:sqlite //can be ommited. throws error once enabled
smem --set path src/main/resources/databases/smem/smem-db.sqlite
smem --set append-database on
smem --set lazy-commit off
smem --set optimization safety
smem --init

# add some preload knowledge/objects. it is useful for content of large knowledge bases.
# smem --add {
#    (<dirs> ^directions <n> <ne> <nw> <e> <s> <sw> <se> <w>)  
#    (<n> ^value north ^opposite south)
#    (<ne> ^value northeast ^opposite southwest)
#    (<nw> ^value northwest ^opposite southeast)
#    (<e> ^value east  ^opposite west)
#    (<s> ^value south ^opposite north)
#    (<sw> ^value southwest ^opposite northeast)
#    (<se> ^value southeast ^opposite northwest)
#    (<w> ^value west  ^opposite east)
# }


# sp {propose*store*directions
#   (state <s> ^superstate nil 
#             #  ^smem <smem>
#             #  ^smem.command <sc>
#              )
# #   (<smem> -^result.success )
# --> 
#    (write (crlf) |======= beginning ========|)
#    (cmd smem --add 
#    |
#    (<dirs> ^directions <n> <ne> <nw> <e> <s> <sw> <se> <w>)  
#    (<n> ^value north ^opposite south)
#    (<ne> ^value northeast ^opposite southwest)
#    (<nw> ^value northwest ^opposite southeast)
#    (<e> ^value east  ^opposite west)
#    (<s> ^value south ^opposite north)
#    (<sw> ^value southwest ^opposite northeast)
#    (<se> ^value southeast ^opposite northwest)
#    (<w> ^value west  ^opposite east)
#    | 
#    )
# }

sp {initialize*state*directions
   (state <ss> ^type state)
   -->
   (<ss> ^directions <n> <ne> <nw> <e> <s> <sw> <se> <w>)  
   (<n> ^value north ^opposite south)
   (<ne> ^value northeast ^opposite southwest)
   (<nw> ^value northwest ^opposite southeast)
   (<e> ^value east  ^opposite west)
   (<s> ^value south ^opposite north)
   (<sw> ^value southwest ^opposite northeast)
   (<se> ^value southeast ^opposite northwest)
   (<w> ^value west  ^opposite east)}


sp {initialize*state*preferable*directions
   (state <ss> ^type state)
   -->
   (<ss> ^preferable-directions <ne> <nw> <sw> <se> ) 
   
   (<ne> ^value northeast ^prefer northeast) 
   (<ne> ^value northeast ^prefer east)
   (<ne> ^value northeast ^prefer north)
   
   (<nw> ^value northwest ^prefer northwest)
   (<nw> ^value northwest ^prefer west)
   (<nw> ^value northwest ^prefer north)

   (<sw> ^value southwest ^prefer southwest)
   (<sw> ^value southwest ^prefer south)
   (<sw> ^value southwest ^prefer west)

   (<se> ^value southeast ^prefer southeast)
   (<se> ^value southeast ^prefer south)
   (<se> ^value southeast ^prefer east)
}

#
#START: Proposal Rules
#
#

sp {propose*move-to-landmark
   (state <s> ^io.input-link.landmarks.<landmarks> <lnd>     
              ^io.input-link.self.pose <e>
              ^io.input-link.area.<view> <area-view> )
   (<e> ^x <x> ^y <y>)
   (<lnd> ^direction-command <direction-command> )
   (<lnd> ^distance <distance-agent> )
   (<area-view> ^<direction-command>.type <cell-type>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name move-to-landmark
        ^lnd <lnd>
        ^distance-agent <distance-agent>
        ^direction-command <direction-command>
        ^cell-type <cell-type>)}


sp {propose*move-random
   (state <s> ^io.input-link.self.pose <e>
              ^io.input-link.area.<view> <v-directions> 
              ^io.input-link.landmarks.status 
               { <landmarks-status> <> inactive } )
    (<e> ^x <x> ^y <y>)
    (<v-directions> ^ { << north northeast northwest east west south southeast southwest >> <n-dir> } )
    (<v-directions> ^<n-dir>.type <> block )
    
-->
   (<s> ^operator <o> + =)
   (<o> ^name move-random
        ^direction-command <n-dir> )}

#
#END: Proposal Rules
#
#

#
#START: Apply Rules
#
#

sp {apply*move
   (state <s> ^io.output-link <ol>
              ^operator <o>)
   (<o> ^name { <name> << move-to-landmark move-random >> }
        ^direction-command <dir>)
-->
   # (write | applied operator is : | <name>)
   (<ol> ^move.direction <dir>)} 


sp {apply*move*remove-move
   (state <s> ^io.output-link <ol>
              ^operator.name <name>)
   (<ol> ^move <direction>)
   (<direction> ^status complete)
-->
   (<ol> ^move <direction> -)}


sp {apply*move*create*last-direction
   (state <s> ^operator <o>)
   (<o> ^name { <name> << move-to-landmark move-random >> }
        ^direction-command <direction>)
-->
   (<s> ^last-direction <direction>)}


sp {apply*move*remove*last-direction
   (state <s> ^operator <o>
              ^last-direction <direction>)
   (<o> ^name { <name> << move-to-landmark move-random >> }
        ^direction-command <> <direction>)
-->
#    (<s> ^prior-direction <direction> )
   (<s> ^last-direction <direction> -)}  


sp {smem*query
   (state <s> ^last-direction <l-dir>
              ^smem.command <sc> )
   # (<sc> -^query <q> )
--> 
# (write (crlf) |======= SMEM query for last direction ========| <l-dir>)
 (<sc> ^query <cue>)
 (<cue> ^value <l-dir> )
 (<cue> ^prefer <anyvalue> )
}

#
#END: Apply Rules
#
#

#
#START: Select Rules
#
#

sp {select*move-to-landmark*pick-landmark-with-shortest-distance
    (state <s> ^operator <o1> + 
                ^operator <o2> + )
    (<o1> ^name move-to-landmark
            ^lnd.distance <distance1> )
    (<o2> ^name move-to-landmark
            ^lnd.distance <distance2> > <distance1> )
-->
(<s> ^operator <o1> > <o2>)}

sp {select*move-to-landmark*pick-other-direction-if-block
    (state <s> ^operator <o1> +
                ^operator <o2> + )
    (<o1> ^name move-random )
    (<o2> ^name move-to-landmark
            ^cell-type << block >> )
    
-->
(<s> ^operator <o1> > <o2> )}

sp {select*move-to-landmark*pick-original-landmark-direction
    (state <s> ^operator <o1> + )
    (<o1> ^name move-to-landmark 
        ^cell-type << normal >> )
-->
(<s> ^operator <o1> > )}


sp {select*move-to-landmark*no-smem*pick-prefer-directions-over-others-if-landmark-block
    (state <s> ^operator <o1> + 
                ^operator <o2> +
                -^smem.result.success <smem-result>
                ^preferable-directions <pd>
                ^last-direction <l-dir> )
    (<pd> ^value <l-dir>
        ^prefer <p-dir> )
    (<o1> ^name move-random
            ^direction-command <p-dir> )
    (<o2> ^name move-to-landmark
            ^cell-type << block >>  )
    
-->
(write (crlf) |======= operator selected based on short term memory data ========|)
(<s> ^operator <o1> > )}

sp {select*move-to-landmark*smem*pick-prefer-directions-over-others-if-landmark-block
    (state <s> ^operator <o1> + 
                ^operator <o2> +
                ^last-direction <l-dir> 
                ^smem.result.success <smem-result>
                ^smem.result.retrieved <smem-retrieved>)

   (<smem-retrieved> ^value <l-dir>
        ^prefer <p-dir>  )
    (<o1> ^name move-random
            ^direction-command <p-dir> )
    (<o2> ^name move-to-landmark
            ^cell-type << block >>  )
    
-->
(write (crlf) |======= operator selected based on Semantic Memory(SMEM) data ========| <smem-retrieved> )
(<s> ^operator <o1> > )}


sp {select*move-forward*prefer-forward-than-others
    (state <s> ^operator <o1> +
                ^operator <o2> +
                ^last-direction <lastdirection> )
    (<o1> ^name << move-random >>
            ^direction-command <lastdirection> )
    (<o2> ^name << move-random >>
            ^direction-command <direction> )
-->
(<s> ^operator <o1> > <o2>)}
